import json, sqlite3, telebot, os, sys
from telebot import types

# ==========================
# –Ü–Ω–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–Ω–∏—Ö
# ==========================

con = sqlite3.connect("information/verification.db", check_same_thread=False)
cur = con.cursor()
cur.execute('''
CREATE TABLE IF NOT EXISTS ver (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    tg_id INTEGER NOT NULL
)''')
con.commit()


# ================
# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
# ================

with open("tocken.txt", "r") as file_with_token:
    token = file_with_token.readline().strip()
bot = telebot.TeleBot(token)


# =================
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# =================

def is_command(text):
    return text.startswith('/')

def open_json(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)
def save_json(path,data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    

# ===============
# –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# ===============

def new_directory(message):
    if is_command(message.text):
        bot.send_message(message.chat.id, "‚ùå –í–∏ –≤–∏–π—à–ª–∏ –∑—ã —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ä –ø–∞–ø–∫–∏.")
        return

    folder_name = message.text.strip()
    SAVE_DIR = os.path.join("files", folder_name)
    os.makedirs(SAVE_DIR, exist_ok=True)
    bot.send_message(message.chat.id, f"‚úÖ –ü–∞–ø–∫–∞ '{folder_name}' —Å—Ç–≤–æ—Ä–µ–Ω–∞!")

def new_teacher(message):
    if is_command(message.text):
        bot.send_message(message.chat.id, "‚ùå –í–∏ –≤–∏–π—à–ª–∏ –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—á–∏—Ç–µ–ª—è.")
        return
    try:
        teacher_id = int(message.text.strip())
        data = open_json('information/admins.json')
        data["teachers_id"].append(teacher_id)
        save_json("information/admins.json", data)
        bot.send_message(message.chat.id, '‚úÖ –ù–æ–≤–æ–≥–æ –≤—á–∏—Ç—î–ª—è –¥–æ–¥–∞–Ω–æ')
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Å id")

def new_admin(message):
    if is_command(message.text):
        bot.send_message(message.chat.id, "‚ùå –í–∏ –≤–∏–π—à–ª–∏ –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞.")
        return
    try:
        admin_id = int(message.text.strip())
        data = open_json('information/admins.json')
        data["admins_id"].append(admin_id)
        save_json('information/admins.json', data)
        bot.send_message(message.chat.id, '‚úÖ –ù–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞ –¥–æ–¥–∞–Ω–æ')
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Å id")

def show_verification(message):
    cur.execute("SELECT * FROM ver")
    result = cur.fetchall()
    if not result:
        bot.send_message(message.chat.id, "üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.")
        return
    text = "üìã –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–∞—è–≤–æ–∫:\n\n"
    for row in result:
        text += f"üÜî {row[0]} | üë§ {row[1]} | üí¨ {row[2]}\n"
        bot.send_message(message.chat.id, text)


# ==============
# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
# ==============

@bot.callback_query_handler(func= lambda callback:True)
def callback_info(callback):

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ –Ω–∞–≤—á–∞–Ω–Ω—è
    # ------------------------
    if callback.data == 'information':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∏', callback_data='teleChats'))
        markup.add(types.InlineKeyboardButton('–§–∞–π–ª–∏ –∑ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤', callback_data='files_folders'))
        bot.send_message(callback.message.chat.id,'–Ø–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∞–±–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –≤—ñ –±—ñ —Ö–æ—Ç—ñ–ª–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏?', reply_markup=markup)

    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∏
    # ----------------------------
    elif callback.data == 'teleChats':
        with open("information/teleChats.json", "r", encoding="utf-8") as f:
            js = json.load(f)
            for i in js:
                bot.send_message(callback.message.chat.id, f"{i}:{js[i]}")

    # –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∞–¥–º—ñ–Ω–∞
    # ------------------
    elif callback.data == 'admin_tools':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–í–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞', callback_data='shut_down'))
        markup.add(types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—É', callback_data='add_new_directory'))
        markup.add(types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏ –≤—á–∏—Ç—î–ª—è', callback_data='add_new_teacher'))
        markup.add(types.InlineKeyboardButton('–¥–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞', callback_data='add_new_admin'))
        markup.add(types.InlineKeyboardButton('–í–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ –∑–∞—è–≤–∫–∏ –¥–æ –≤—á–∏—Ç–µ–ª—ñ–≤', callback_data='show_verification'))
        bot.send_message(callback.message.chat.id, "–Ø–∫–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏?", reply_markup=markup)

    elif callback.data == 'shut_down':
        bot.stop_polling()

    elif callback.data == 'add_new_directory':
        bot.send_message(callback.message.chat.id, "B–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –ø–∞–ø–∫–∏")
        bot.register_next_step_handler(callback.message, new_directory)

    elif callback.data == 'add_new_teacher':
        bot.send_message(callback.message.chat.id, "B–≤–µ–¥—ñ—Ç—å id –Ω–æ–≤–æ–≥–æ –≤—á–∏—Ç–µ–ª—è")
        bot.register_next_step_handler(callback.message, new_teacher)

    elif callback.data == 'add_new_admin':
        bot.send_message(callback.message.chat.id, "B–≤–µ–¥—ñ—Ç—å id –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞")
        bot.register_next_step_handler(callback.message, new_admin)
        
    elif callback.data == 'show_verification':
        show_verification(callback.message)

    elif callback.data == 'files_folders':
        markup = types.InlineKeyboardMarkup()
        for folder in os.listdir('files'):
            markup.add(types.InlineKeyboardButton(folder, callback_data=f'folders|{folder}'))
        bot.send_message(callback.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞–º –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)


# ==============
# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
# ==============

@bot.message_handler(commands=['start'])
def start_command(message):
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('/start'))

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', callback_data='information'))
    data = open_json('information/admins.json')

    if message.from_user.id in data["admins_id"]:
        markup.add(types.InlineKeyboardButton("admin_tools", callback_data='admin_tools'))

    bot.send_message(message.chat.id, f'–í—ñ—Ç–∞—î–º–æ, {message.from_user.first_name} {message.from_user.last_name}, —É –±–æ—Ç—ñ Liceum. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é.', reply_markup= markup)
    bot.send_message(message.chat.id,"‚¨á –í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /start",reply_markup=keyboard)

@bot.message_handler(commands=['info'])
def information(message):
    bot.send_message(message.chat.id, 'info')

@bot.message_handler(commands=['verification'])
def verify(message):
    full_name = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
    cur.execute("INSERT INTO ver (name, tg_id) VALUES (?, ?)", (full_name, message.from_user.id))
    con.commit()
    
    bot.send_message(message.chat.id, f"‚úÖ {full_name}, –≤–∞—Å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏!")


# ===========
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ===========

bot.polling(none_stop=True)
